Directory structure:
└── src/
    ├── App.jsx
    ├── index.css
    ├── main.jsx
    ├── components/
    │   ├── layout/
    │   │   ├── Header.jsx
    │   │   └── Sidebar.jsx
    │   ├── notifications/
    │   │   ├── Dashbox.jsx
    │   │   ├── Login.jsx
    │   │   ├── NotificationList.jsx
    │   │   ├── Notifications.jsx
    │   │   └── Tasks.jsx
    │   └── tasks/
    │       ├── TaskCard.jsx
    │       └── Taskform.jsx
    ├── context/
    │   └── AuthContext.jsx
    ├── pages/
    │   ├── Dashboard.jsx
    │   ├── Login.jsx
    │   ├── Notifications.jsx
    │   ├── Projects.jsx
    │   ├── Setting.jsx
    │   └── Tasks.jsx
    ├── router/
    │   └── AppRoutes.jsx
    └── utils/
        └── api.js

================================================
FILE: App.jsx
================================================
import { useLocation } from 'react-router-dom';
import Sidebar from './components/layout/Sidebar.jsx';
import AppRoutes from './router/AppRoutes.jsx';

export default function App() {
  const location = useLocation();
  const hideSidebar = location.pathname === '/login';

  return (
    <div className={hideSidebar ? '' : 'layout'}>
      {!hideSidebar && <Sidebar />}
      <div className="main">
        <AppRoutes />
      </div>
    </div>
  );
}



================================================
FILE: index.css
================================================
.shadow-neumorph {
  box-shadow: 10px 10px 30px #d1d1d6, -10px -10px 30px #ffffff;
}

.layout {
  display: flex;
  height: 100vh;
}

.sidebar {
  width: 80px;
  background: linear-gradient(145deg, #e0e0e5, #ffffff);
  box-shadow: 10px 10px 30px #d1d1d6, -10px -10px 30px #ffffff;
  border-radius: 20px;
  padding: 20px 10px;
  display: flex;
  flex-direction: column;
  align-items: center;
  position: relative; /* <-- Ensure it's not absolute */
}

.main {
  flex: 1;
  padding: 2rem;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
}

.card {
  background: linear-gradient(145deg, #f0f0f5, #ffffff);
  box-shadow: 6px 6px 20px #d1d1d6, -6px -6px 20px #ffffff;
  border-radius: 20px;
  padding: 20px;
  transition: transform 0.2s ease;
}

.card:hover {
  transform: translateY(-4px);
}

body {
  margin: 0;
  font-family: 'Poppins', sans-serif;
  background: #f4f5fa;
  color: #333;
}

.sidebar a {
  color: #7e7e8f;
  margin: 20px 0;
  font-size: 24px;
}

.button {
  background: linear-gradient(145deg, #a28fff, #d18cff);
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 12px;
  font-size: 16px;
  cursor: pointer;
  box-shadow: 0 4px 10px rgba(0,0,0,0.15);
}

.button:hover {
  background: linear-gradient(145deg, #8b70f8, #c472f8);
}

.progress-bar {
  background: #e0e0e5;
  border-radius: 20px;
  height: 10px;
  overflow: hidden;
}

.progress-bar-fill {
  height: 100%;
  border-radius: 20px;
  background: linear-gradient(to right, #a28fff, #d18cff);
}



================================================
FILE: main.jsx
================================================
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App.jsx';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <BrowserRouter>
    <App />
  </BrowserRouter>
);



================================================
FILE: components/layout/Header.jsx
================================================
export default function Header() {
  return (
    <header className="flex justify-between items-center p-6 bg-white rounded-2xl shadow-sm">
      <h1 className="text-2xl font-bold text-gray-700">Dashboard</h1>
      <div className="flex items-center space-x-4">
        <div className="w-10 h-10 rounded-full bg-gray-300" />
      </div>
    </header>
  );
}



================================================
FILE: components/layout/Sidebar.jsx
================================================
import { NavLink } from 'react-router-dom';
import { Home, Folder, ClipboardList, Bell, Settings, Users, Calendar, UserCheck } from 'lucide-react';

export default function Sidebar() {
  return (
    <aside className="sidebar">
      {/* Logo/Brand */}
      <div className="flex items-center justify-center w-12 h-12 mb-8 rounded-xl bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
        <Users className="w-6 h-6" />
      </div>

      {/* Navigation Links */}
      <div className="flex flex-col space-y-4">
        <NavLink 
          to="/" 
          className={({ isActive }) => 
            `flex items-center justify-center w-12 h-12 rounded-xl transition-all duration-200 ${
              isActive 
                ? 'bg-purple-100 text-purple-600 shadow-md' 
                : 'text-gray-500 hover:bg-purple-50 hover:text-purple-500'
            }`
          }
          title="Dashboard"
        >
          <Home className="w-5 h-5" />
        </NavLink>

        <NavLink 
          to="/projects" 
          className={({ isActive }) => 
            `flex items-center justify-center w-12 h-12 rounded-xl transition-all duration-200 ${
              isActive 
                ? 'bg-purple-100 text-purple-600 shadow-md' 
                : 'text-gray-500 hover:bg-purple-50 hover:text-purple-500'
            }`
          }
          title="Projects"
        >
          <Folder className="w-5 h-5" />
        </NavLink>

        <NavLink 
          to="/tasks" 
          className={({ isActive }) => 
            `flex items-center justify-center w-12 h-12 rounded-xl transition-all duration-200 ${
              isActive 
                ? 'bg-purple-100 text-purple-600 shadow-md' 
                : 'text-gray-500 hover:bg-purple-50 hover:text-purple-500'
            }`
          }
          title="Tasks"
        >
          <ClipboardList className="w-5 h-5" />
        </NavLink>

        <NavLink 
          to="/meetings" 
          className={({ isActive }) => 
            `flex items-center justify-center w-12 h-12 rounded-xl transition-all duration-200 ${
              isActive 
                ? 'bg-purple-100 text-purple-600 shadow-md' 
                : 'text-gray-500 hover:bg-purple-50 hover:text-purple-500'
            }`
          }
          title="Meetings"
        >
          <Calendar className="w-5 h-5" />
        </NavLink>

        <NavLink 
          to="/attendance" 
          className={({ isActive }) => 
            `flex items-center justify-center w-12 h-12 rounded-xl transition-all duration-200 ${
              isActive 
                ? 'bg-purple-100 text-purple-600 shadow-md' 
                : 'text-gray-500 hover:bg-purple-50 hover:text-purple-500'
            }`
          }
          title="Attendance"
        >
          <UserCheck className="w-5 h-5" />
        </NavLink>

        <NavLink 
          to="/notifications" 
          className={({ isActive }) => 
            `flex items-center justify-center w-12 h-12 rounded-xl transition-all duration-200 ${
              isActive 
                ? 'bg-purple-100 text-purple-600 shadow-md' 
                : 'text-gray-500 hover:bg-purple-50 hover:text-purple-500'
            }`
          }
          title="Notifications"
        >
          <Bell className="w-5 h-5" />
        </NavLink>
      </div>

      {/* Bottom Section */}
      <div className="mt-auto">
        <NavLink 
          to="/settings" 
          className={({ isActive }) => 
            `flex items-center justify-center w-12 h-12 rounded-xl transition-all duration-200 ${
              isActive 
                ? 'bg-gray-100 text-gray-700 shadow-md' 
                : 'text-gray-400 hover:bg-gray-50 hover:text-gray-600'
            }`
          }
          title="Settings"
        >
          <Settings className="w-5 h-5" />
        </NavLink>
      </div>
    </aside>
  );
}



================================================
FILE: components/notifications/Dashbox.jsx
================================================



================================================
FILE: components/notifications/Login.jsx
================================================



================================================
FILE: components/notifications/NotificationList.jsx
================================================



================================================
FILE: components/notifications/Notifications.jsx
================================================



================================================
FILE: components/notifications/Tasks.jsx
================================================



================================================
FILE: components/tasks/TaskCard.jsx
================================================



================================================
FILE: components/tasks/Taskform.jsx
================================================



================================================
FILE: context/AuthContext.jsx
================================================
import { createContext, useContext, useEffect, useState } from 'react';
import axios from '../utils/api';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);     // Stores GitHub user data
  const [loading, setLoading] = useState(true); // Indicates if we're still checking login

  // Called when app loads to check if user is already logged in
  useEffect(() => {
    const fetchUser = async () => {
      try {
        const res = await axios.get('/auth/me'); // Backend should return GitHub profile
        setUser(res.data);
      } catch (err) {
        setUser(null); // Not logged in
      } finally {
        setLoading(false); // Done loading
      }
    };
    fetchUser();
  }, []);

  return (
    <AuthContext.Provider value={{ user, setUser, loading }}>
      {children}
    </AuthContext.Provider>
  );
};

// 🔁 useAuth hook
export const useAuth = () => useContext(AuthContext);




================================================
FILE: pages/Dashboard.jsx
================================================
import Header from '../components/layout/Header';
import Sidebar from '../components/layout/Sidebar';

export default function Dashboard() {
  const stats = {
    totalTasks: 120,
    completedTasks: 85,
    ongoingProjects: 5,
    upcomingMeetings: 3,
    activeMembers: 12,
  };

  return (
    <div className="flex h-screen">
      <div className="flex-1 flex flex-col p-8">
        <Header />
        <div className="grid grid-cols-3 gap-6 mt-6">
          <div className="card col-span-2">
            <h2 className="text-xl font-bold mb-4">Team Activity Overview</h2>
            <div className="flex justify-around text-center">
              <div>
                <p className="text-3xl font-semibold text-purple-500">120</p>
                <p className="text-gray-500 text-sm">Total Tasks</p>
              </div>
              <div>
                <p className="text-3xl font-semibold text-green-500">85</p>
                <p className="text-gray-500 text-sm">Completed</p>
              </div>
              <div>
                <p className="text-3xl font-semibold text-pink-500">5</p>
                <p className="text-gray-500 text-sm">Ongoing Projects</p>
              </div>
              <div>
                <p className="text-3xl font-semibold text-yellow-500">3</p>
                <p className="text-gray-500 text-sm">Meetings</p>
              </div>
              <div>
                <p className="text-3xl font-semibold text-blue-500">12</p>
                <p className="text-gray-500 text-sm">Active Members</p>
              </div>
            </div>
          </div>

          <div className="card flex flex-col justify-between">
            <h2 className="text-lg font-bold mb-2">Next Meeting</h2>
            <p className="text-gray-600">Project Kickoff</p>
            <p className="text-sm text-gray-400">Today at 3:00 PM</p>
            <button className="button mt-4">Join Meeting</button>
          </div>

          <div className="card">
            <h3 className="text-lg font-semibold mb-2">Tasks Progress</h3>
            <p className="text-gray-500 mb-2">85 / 120 Completed</p>
            <div className="w-full bg-gray-300 rounded-full h-4">
              <div className="bg-green-400 h-4 rounded-full" style={{ width: '70%' }}></div>
            </div>
          </div>

          <div className="card">
            <h3 className="text-lg font-semibold mb-2">Project Completion</h3>
            <p className="text-gray-500 mb-2">3 out of 5 Projects On Track</p>
            <div className="w-full bg-gray-300 rounded-full h-4">
              <div className="bg-purple-400 h-4 rounded-full" style={{ width: '60%' }}></div>
            </div>
          </div>

          <div className="card">
            <h3 className="text-lg font-semibold mb-2">Notifications</h3>
            <ul className="text-sm text-gray-500 space-y-2">
              <li>✔️ Task "UI Redesign" marked complete</li>
              <li>🕒 Meeting scheduled with Client X</li>
              <li>📝 New Task assigned: "API Integration"</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: pages/Login.jsx
================================================
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Github, Users, Calendar, ClipboardCheck } from 'lucide-react';
import axios from 'axios';

axios.defaults.withCredentials = true;

function Login() {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    axios.get('http://localhost:5000/auth/user', { withCredentials: true })
      .then(res => {
        setUser(res.data);
        if (res.data) {
          // Redirect to dashboard if already logged in
          navigate('/');
        }
      })
      .catch(() => setUser(null))
      .finally(() => setLoading(false));
  }, [navigate]);

  const handleLogin = () => {
    window.location.href = 'http://localhost:5000/auth/github';
  };

  if (loading) {
    return (
      <div className="h-screen flex items-center justify-center bg-[#f4f5fa]">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-[#f4f5fa] to-[#e8eaf6] p-4">
      <div className="max-w-md w-full">
        {/* Header Section */}
        <div className="text-center mb-8">
          <div className="bg-gradient-to-r from-purple-500 to-pink-500 w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-lg">
            <Users className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-3xl font-bold text-gray-800 mb-2">TeamHub</h1>
          <p className="text-gray-600">College Team Management System</p>
        </div>

        {/* Login Card */}
        <div className="bg-gradient-to-br from-white to-[#f9f9ff] shadow-neumorph px-8 py-10 rounded-3xl">
          <div className="text-center mb-8">
            <h2 className="text-2xl font-semibold text-gray-700 mb-3">Welcome Back</h2>
            <p className="text-gray-500 text-sm leading-relaxed">
              Sign in with your GitHub account to access team projects, 
              schedule meetings, and manage attendance
            </p>
          </div>

          {/* Features Preview */}
          <div className="grid grid-cols-2 gap-4 mb-8">
            <div className="text-center p-3 bg-purple-50 rounded-xl">
              <Calendar className="w-6 h-6 text-purple-500 mx-auto mb-2" />
              <p className="text-xs text-gray-600">Schedule Meetings</p>
            </div>
            <div className="text-center p-3 bg-pink-50 rounded-xl">
              <ClipboardCheck className="w-6 h-6 text-pink-500 mx-auto mb-2" />
              <p className="text-xs text-gray-600">Track Attendance</p>
            </div>
          </div>

          {/* Login Button */}
          <button 
            onClick={handleLogin}
            className="w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white px-6 py-4 rounded-xl text-lg font-medium shadow-lg hover:shadow-xl hover:scale-[1.02] transition-all duration-200 flex items-center justify-center gap-3"
          >
            <Github className="w-5 h-5" />
            Continue with GitHub
          </button>

          <div className="mt-6 text-center">
            <p className="text-xs text-gray-400">
              By signing in, you agree to our team collaboration guidelines
            </p>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center mt-8">
          <p className="text-sm text-gray-500">
            Made for college teams • Secure & Fast
          </p>
        </div>
      </div>
    </div>
  );
}

export default Login;



================================================
FILE: pages/Notifications.jsx
================================================
import Sidebar from '../components/layout/Sidebar';
import Header from '../components/layout/Header';

const Notifications = () => {
  return (
    <div>
      <h1 style={{ color: 'orange' }}>Notifications 🔔</h1>
      <p>You have no new notifications.</p>
    </div>
  );
};

export default Notifications;




================================================
FILE: pages/Projects.jsx
================================================
const Projects = () => {
 return (
  <div>
    <h1 style={{ color: 'green'}}>Ongoing Projects</h1>
    <p>currently contributing in no projects.</p>
  </div>	
 );
};

export default Projects;



================================================
FILE: pages/Setting.jsx
================================================
import React, { useState, useEffect } from 'react';
import { User, Mail, Phone, MapPin, Calendar, Save, Camera, Github } from 'lucide-react';
import axios from '../utils/api';

export default function Settings() {
  const [user, setUser] = useState(null);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    rollNumber: '',
    branch: '',
    year: '',
    position: '',
    bio: '',
    skills: '',
    socialLinks: {
      github: '',
      linkedin: '',
      portfolio: ''
    }
  });
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [message, setMessage] = useState({ type: '', content: '' });

  useEffect(() => {
    fetchUserProfile();
  }, []);

  const fetchUserProfile = async () => {
    try {
      const response = await axios.get('/auth/me');
      const userData = response.data;
      setUser(userData);
      
      // Populate form with existing data
      setFormData({
        name: userData.name || '',
        email: userData.email || '',
        phone: userData.phone || '',
        rollNumber: userData.rollNumber || '',
        branch: userData.branch || '',
        year: userData.year || '',
        position: userData.position || 'Member',
        bio: userData.bio || '',
        skills: Array.isArray(userData.skills) ? userData.skills.join(', ') : userData.skills || '',
        socialLinks: {
          github: userData.socialLinks?.github || userData.githubUrl || '',
          linkedin: userData.socialLinks?.linkedin || '',
          portfolio: userData.socialLinks?.portfolio || ''
        }
      });
    } catch (error) {
      console.error('Error fetching user profile:', error);
      setMessage({ type: 'error', content: 'Failed to load profile data' });
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    if (name.startsWith('social_')) {
      const socialKey = name.replace('social_', '');
      setFormData(prev => ({
        ...prev,
        socialLinks: {
          ...prev.socialLinks,
          [socialKey]: value
        }
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSaving(true);
    setMessage({ type: '', content: '' });

    try {
      // Process skills as array
      const processedData = {
        ...formData,
        skills: formData.skills.split(',').map(skill => skill.trim()).filter(skill => skill)
      };

      // API call to update profile (assuming endpoint exists)
      await axios.put('/auth/profile', processedData);
      
      setMessage({ type: 'success', content: 'Profile updated successfully!' });
      
      // Refresh user data
      await fetchUserProfile();
    } catch (error) {
      console.error('Error updating profile:', error);
      setMessage({ 
        type: 'error', 
        content: error.response?.data?.message || 'Failed to update profile' 
      });
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-6">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-800 mb-2">Profile Settings</h1>
        <p className="text-gray-600">Manage your team profile and preferences</p>
      </div>

      {/* Message Display */}
      {message.content && (
        <div className={`p-4 rounded-xl mb-6 ${
          message.type === 'success' 
            ? 'bg-green-50 text-green-700 border border-green-200' 
            : 'bg-red-50 text-red-700 border border-red-200'
        }`}>
          {message.content}
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Profile Picture Section */}
        <div className="lg:col-span-1">
          <div className="card text-center">
            <div className="relative inline-block mb-4">
              <img 
                src={user?.photos?.[0]?.value || user?.avatar || '/default-avatar.png'} 
                alt="Profile" 
                className="w-32 h-32 rounded-full object-cover shadow-lg"
              />
              <button className="absolute bottom-2 right-2 bg-purple-500 hover:bg-purple-600 text-white p-2 rounded-full shadow-lg transition-colors">
                <Camera className="w-4 h-4" />
              </button>
            </div>
            <h3 className="text-xl font-semibold text-gray-800 mb-1">
              {user?.name || user?.username || 'Team Member'}
            </h3>
            <p className="text-purple-500 font-medium mb-2">{formData.position}</p>
            <p className="text-gray-500 text-sm">{formData.branch} • Year {formData.year}</p>
            
            {/* GitHub Link */}
            {user?.githubUrl && (
              <a 
                href={user.githubUrl}
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center gap-2 mt-4 text-gray-600 hover:text-purple-500 transition-colors"
              >
                <Github className="w-4 h-4" />
                GitHub Profile
              </a>
            )}
          </div>
        </div>

        {/* Profile Form */}
        <div className="lg:col-span-2">
          <form onSubmit={handleSubmit} className="card">
            <h2 className="text-xl font-semibold text-gray-800 mb-6">Personal Information</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Basic Info */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <User className="w-4 h-4 inline mr-2" />
                  Full Name
                </label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Mail className="w-4 h-4 inline mr-2" />
                  Email Address
                </label>
                <input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Phone className="w-4 h-4 inline mr-2" />
                  Phone Number
                </label>
                <input
                  type="tel"
                  name="phone"
                  value={formData.phone}
                  onChange={handleInputChange}
                  className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Roll Number
                </label>
                <input
                  type="text"
                  name="rollNumber"
                  value={formData.rollNumber}
                  onChange={handleInputChange}
                  className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Branch/Department
                </label>
                <select
                  name="branch"
                  value={formData.branch}
                  onChange={handleInputChange}
                  className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
                >
                  <option value="">Select Branch</option>
                  <option value="Computer Science">Computer Science</option>
                  <option value="Information Technology">Information Technology</option>
                  <option value="Electronics">Electronics</option>
                  <option value="Mechanical">Mechanical</option>
                  <option value="Civil">Civil</option>
                  <option value="Electrical">Electrical</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Academic Year
                </label>
                <select
                  name="year"
                  value={formData.year}
                  onChange={handleInputChange}
                  className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
                >
                  <option value="">Select Year</option>
                  <option value="1">1st Year</option>
                  <option value="2">2nd Year</option>
                  <option value="3">3rd Year</option>
                  <option value="4">4th Year</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Team Position
                </label>
                <select
                  name="position"
                  value={formData.position}
                  onChange={handleInputChange}
                  className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
                >
                  <option value="Member">Member</option>
                  <option value="Team Lead">Team Lead</option>
                  <option value="Project Manager">Project Manager</option>
                  <option value="Developer">Developer</option>
                  <option value="Designer">Designer</option>
                  <option value="Analyst">Analyst</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Skills (comma separated)
                </label>
                <input
                  type="text"
                  name="skills"
                  value={formData.skills}
                  onChange={handleInputChange}
                  placeholder="React, Node.js, Python, UI/UX"
                  className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
                />
              </div>
            </div>

            {/* Bio Section */}
            <div className="mt-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Bio
              </label>
              <textarea
                name="bio"
                value={formData.bio}
                onChange={handleInputChange}
                rows="3"
                placeholder="Tell us about yourself and your interests..."
                className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all resize-none"
              />
            </div>

            {/* Social Links */}
            <div className="mt-6">
              <h3 className="text-lg font-medium text-gray-800 mb-4">Social Links</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    GitHub URL
                  </label>
                  <input
                    type="url"
                    name="social_github"
                    value={formData.socialLinks.github}
                    onChange={handleInputChange}
                    placeholder="https://github.com/username"
                    className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    LinkedIn URL
                  </label>
                  <input
                    type="url"
                    name="social_linkedin"
                    value={formData.socialLinks.linkedin}
                    onChange={handleInputChange}
                    placeholder="https://linkedin.com/in/username"
                    className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
                  />
                </div>
              </div>
            </div>

            {/* Submit Button */}
            <div className="mt-8 flex justify-end">
              <button
                type="submit"
                disabled={saving}
                className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-8 py-3 rounded-xl font-medium shadow-lg hover:shadow-xl hover:scale-[1.02] transition-all duration-200 flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {saving ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    Saving...
                  </>
                ) : (
                  <>
                    <Save className="w-4 h-4" />
                    Save Changes
                  </>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: pages/Tasks.jsx
================================================
import Sidebar from '../components/layout/Sidebar';
import Header from '../components/layout/Header';

const Tasks = () => {
  return (
    <div>
      <h1 style={{ color: 'blue' }}>Tasks 📋</h1>
      <p>Here are your current tasks...</p>
    </div>
  );
};

export default Tasks;




================================================
FILE: router/AppRoutes.jsx
================================================
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Dashboard from '../pages/Dashboard';
import Login from '../pages/Login';
import Notifications from '../pages/Notifications';
import Projects from '../pages/Projects';
import Tasks from '../pages/Tasks';

const AppRoutes = () => {
  return (
      <Routes>
        <Route path="/" element={<Dashboard />} />
        <Route path="/login" element={<Login />} />
        <Route path="/notifications" element={<Notifications />} />
        <Route path="/projects" element={<Projects />} />
        <Route path="/tasks" element={<Tasks />} />
      </Routes>
  );
};

export default AppRoutes;




================================================
FILE: utils/api.js
================================================
import axios from 'axios';

const api = axios.create({
  baseURL: 'http://localhost:5000/api', // Adjust based on backend port
  withCredentials: true, // Ensures cookies are sent (for session handling)
});

export default api;



